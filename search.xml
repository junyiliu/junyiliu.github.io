<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[grpc windows 编译手记]]></title>
      <url>http://willxue.top/2016/10/04/grpc-install/</url>
      <content type="html"><![CDATA[<hr>
<p>因为不想去手动写太复杂的消息反射代码，放弃了<code>protobuf+ZeroMQ</code>的方案，直接使用<code>grpc</code>来完成<code>rpc</code>服务端和<br>客户端。可能是因为开源时间并不长的缘故，网络上关于<code>grpc</code>的资料少之又少，Windows上的编译安装过程难之又难。折腾了好几次之后，总结出一套不再烦人的流程。<br><a id="more"></a></p>
<h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><hr>
<ul>
<li><code>git</code>: 获取源码，第三方依赖等</li>
<li><code>cmake</code>:生成目标编译器项目</li>
<li><code>VS2015</code>: 编译项目</li>
</ul>
<hr>
<h1 id="编译grpc库"><a href="#编译grpc库" class="headerlink" title="编译grpc库"></a>编译<code>grpc</code>库</h1><p>首先创建文件夹<code>D:/cpplib/google</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">D:</div><div class="line">mkdir cpplib</div><div class="line">cd cpplib</div><div class="line">mkdir google</div><div class="line">cd google</div></pre></td></tr></table></figure></p>
<p>下载github上的grpc项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/grpc/grpc.git</div></pre></td></tr></table></figure></p>
<p>获取第三方依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd grpc</div><div class="line">git submodule update --init</div></pre></td></tr></table></figure></p>
<p>编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd vsproject</div><div class="line">build_vs2015.bat grpc.sln</div></pre></td></tr></table></figure></p>
<p>这时编译会失败。用VS2015打开grpc.sln文件。这时因为ssl的问题，在项目中卸载即可。<code>boringssl-&gt;右键-&gt;移除</code>。然后build整个解决方案，完成后提示<code>成功 14 个，失败 2 个</code>。打开vsproject下的Debug目录，可以看到编译生成的库文件。文件中没有zlib,说明这个项目生成失败。grpc_dll项目生成的dll文件大小为0，应该也是失败的，这个暂时不用管，编译demo不用这个。直接编译z项目，提示以下错误:</p>
<p><strong>error C4996: ‘write’: The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _write. See online help for details.</strong></p>
<p>打开<code>zlib.h</code>在<code>#include &quot;zconf.h&quot;</code>后面添加<code>#pragma warning(disable:4996)</code>,添加后的文件为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ZLIB_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZLIB_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zconf.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后再次编译，可以编译成功<code>z.lib</code>。</p>
<p>至此，我们就可以得到<code>Bebug Win32</code>的库。安装类似方法可以得到<code>Release, Win32</code>，<code>Debug Win64</code>, <code>Release Win64</code>的库。编译结果分别在<code>vsproject/Debug</code>, <code>vsproject/Release</code>,<code>vsproject/X64/Debug</code>,<code>vsproject/X64/Release</code>下。</p>
<h1 id="编译protobuf"><a href="#编译protobuf" class="headerlink" title="编译protobuf"></a>编译<code>protobuf</code></h1><p>在<code>third_party/protobuf/cmake</code>，使用cmake生成<code>prptobuf.sln</code>，注意在生成时去掉Test编译选项，否则会提示与<code>gmock</code>有关的错误。然后用vs2015打开，将编译选项设置为<code>Release</code>，编译完成后将Release文件夹拷贝到<code>third_party/protobuf/cmake</code>目录(如果未设置build目录，则应该就在该目录生成Release目录，无需拷贝)。</p>
<h1 id="编译grpc的C-插件"><a href="#编译grpc的C-插件" class="headerlink" title="编译grpc的C++插件"></a>编译<code>grpc</code>的C++插件</h1><p>打开<code>D:\cpplib\google\grpc\vsprojects</code>下面的<code>grpc_protoc_plugins.sln</code>,将编译选项设为Release,编译<code>grpc_cpp_plugin</code>项目，生成exe文件。</p>
<h1 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h1><p>回到<code>google</code>文件夹，创建<code>study/helloworld</code>目录，建立文件<code>helloworld.proto</code>，内容为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">syntax = &quot;proto3&quot;;</div><div class="line"></div><div class="line">option java_multiple_files = true;</div><div class="line">option java_package = &quot;io.grpc.examples.helloworld&quot;;</div><div class="line">option java_outer_classname = &quot;HelloWorldProto&quot;;</div><div class="line">option objc_class_prefix = &quot;HLW&quot;;</div><div class="line"></div><div class="line">package helloworld;</div><div class="line"></div><div class="line">// The greeting service definition.</div><div class="line">service Greeter &#123;</div><div class="line">  // Sends a greeting</div><div class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// The request message containing the user&apos;s name.</div><div class="line">message HelloRequest &#123;</div><div class="line">  string name = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// The response message containing the greetings</div><div class="line">message HelloReply &#123;</div><div class="line">  string message = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以及<code>helloworld.bat</code>, 内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">protoc.exe -I=. --grpc_out=. --plugin=protoc-gen-grpc=...\grpc_cpp_plugin.exe helloworld.proto</div><div class="line">protoc.exe -I=. --cpp_out=. helloworld.proto</div></pre></td></tr></table></figure></p>
<p>这里的<code>grpc_cpp_plugin.exe</code>为上一步编译生成的插件，设置好相关路径。执行<code>helloworld.bat</code>，会生成下面的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">greeter_async_client2.cc  greeter_server.cc      helloworld.grpc.pb.h  helloworld.proto</div><div class="line">greeter_async_server.cc   helloworld.bat         helloworld.pb.cc</div><div class="line">greeter_async_client.cc  greeter_client.cc         helloworld.grpc.pb.cc  helloworld.pb.h</div></pre></td></tr></table></figure>
<p>在当前目录下建立cmake文件CMakeLists.txt ，内容为</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</div><div class="line"><span class="keyword">project</span>(grpchelloworld)</div><div class="line"></div><div class="line"><span class="comment">#add_definitions(_WIN32_WINNT=0x600)</span></div><div class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS_RELEASE <span class="string">"$&#123;CMAKE_CXX_FLAGS_RELEASE&#125; /MT"</span>)</div><div class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS_DEBUG <span class="string">"$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; /MTd"</span>)</div><div class="line"><span class="keyword">add_definitions</span>(-D_WIN32_WINNT=<span class="number">0</span>x600)</div><div class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(</div><div class="line">  D:/cpplib/google/grpc/<span class="keyword">include</span></div><div class="line">  D:/cpplib/google/grpc/third_party/protobuf/src )</div><div class="line"><span class="keyword">link_directories</span>(</div><div class="line">  D:\\cpplib\\google\\grpc\\third_party\\protobuf\\cmake\\build\\Debug <span class="comment">#protobuf</span></div><div class="line">  D:\\cpplib\\google\\grpc\\vsprojects\\Debug <span class="comment">#grpc)</span></div><div class="line"><span class="keyword">aux_source_directory</span>(./ DIR_SRCS)</div><div class="line"></div><div class="line"><span class="comment"># Targets greeter_[async_](client|server)</span></div><div class="line"><span class="keyword">foreach</span>(_target</div><div class="line">  greeter_client greeter_server</div><div class="line">  greeter_async_client greeter_async_server</div><div class="line">greeter_async_client2)</div><div class="line">  <span class="keyword">add_executable</span>(<span class="variable">$&#123;_target&#125;</span> <span class="string">"$&#123;_target&#125;.cc"</span>  helloworld.pb.cc helloworld.grpc.pb.cc)</div><div class="line">  <span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;_target&#125;</span></div><div class="line">    libprotobufd</div><div class="line">    grpc_unsecure</div><div class="line">    gpr</div><div class="line">    grpc++_unsecure</div><div class="line">    Ws2_32</div><div class="line">    z</div><div class="line">    )</div><div class="line"><span class="keyword">endforeach</span>()</div></pre></td></tr></table></figure>
<p>生成vs项目，编译Debug项目成功, 生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">greeter_async_client.exe*   greeter_async_client2.ilk  greeter_async_server.pdb  greeter_server.exe*</div><div class="line">greeter_async_client.ilk    greeter_async_client2.pdb  greeter_client.exe*       greeter_server.ilk</div><div class="line">greeter_async_client.pdb    greeter_async_server.exe*  greeter_client.ilk        greeter_server.pdb</div><div class="line">greeter_async_client2.exe*  greeter_async_server.ilk   greeter_client.pdb</div></pre></td></tr></table></figure></p>
<p>运行一个服务端，再运行一个客户端，测试成功。</p>
]]></content>
    </entry>
    
  
  
</search>
